package network;

/**
 * 传输层向上面的应用程序提供通信服务
 * TCP建立连接的过程
 *   第一次握手
 *      client发送连接请求  数据报文到server端  SYN_SENT状态
 *   第二次握手
 *      server收到连接请求数据报文，如果同意建立连接，向client回应确认报文段(server会为 TCP连接 分配缓存和变量)
 *   第三次握手
 *      client收到server收到确认之后，它再次向服务器端发送确认报文段
 *
 *为什么不能两次握手（WPS上有图）
 *
 * TCP断开连接的过程
 *  第一次挥手
 *     client发送一个 断开连接请求 数据报文到server
 *  第二次挥手
 *     server收到断开连接请求数据报文之后，只是 回应确认 报文端（接着发它未完的数据）
 *  第三次挥手
 *     server发送一个关闭连接请求数据报文到client
 *  第四次挥手
 *     client发回ACK数据报文确认
 *
 * TCP提供面向连接的服务，在传输数据之前必须要建立建立，数据传输之后还需要释放连接，
 * TCP产生的额外开销会比较大，如：确认机制、流量控制、拥塞控制机制需要占用处理器资源
 * 
 * 
 * 
 *
 * UDP协议（了解）
 * 1）UDP是 无连接
 * 2）UDP尽 最大能力交付
 * 3）UDP面向  报文
 * 4）UDP没有拥塞控制
 * 5）UDP首部开销小(只有4个字段 源端口（对方给你回信时需要用的） 目的端口  长度   校验和（）有错就丢弃)
 * 
 * package network.udp
 *
 * UDP编程
 *
 * TCP和UDP的区别
 * TCP:面向连接、可靠的、流式服务
 * UDP:无连接、不可靠的、面向报文的服务（不建立连接    直接打包发送 不管有没有收到  没提供支持可靠的机制 ）
 * 
 * 流式服务：数据是一个数据流，数据没有界限，数据的发送和接收存在直接的联系
 * TCP面向连接、可靠：
 *   1）应答确认机制 & 超时重传机制(可以不知道详细过程  但名词至少要知道)
 *   2）保证有序，每一个TCP数据报文都会有序号
 *   3）接收的数据和源数据完全相同，数据没有损坏（无差错   无重复）
 *
 */
public class Teacher_3_9_TCP_UDP {
}
